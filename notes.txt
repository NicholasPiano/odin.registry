
#$ May 20, 2017

The registry server does not need to use websockets. Data can be pushed to the registry server via a small api, but no data is exchanged between the user and the registry server for normal use, hence only http requests need be used. This protocol can be upgraded to https, but no real authentication is necessary. One need only know the UUID of the application structure that one wishes to access. An example:

Application request:
https://some.registry.server.com/a/60cf1f0a-ff37-4ecb-abbf-b6745bce57a1

Response:
An html document containing,
1. The UI framework
	a. Central state handler
	b. Central user action logging and behaviour registry
	c. Application namespacing
	d. Application dynamic interface definition script loading
	e. Application data exchange and storage
2. Application structure definition and loader

var applications = {
	auth: 'http://localhost:8080',
	chat: 'http://localhost:8000',
	transcription: 'http://localhost:8001',
}

#$ May 29, 2017

Testing node/orm2 package yields difficulties. A sample of the code is found in ./node/orm2. It mostly worked, except for the reverse accessors, which refused to work. The repo can be found at https://github.com/dresende/node-orm2. A fair few dependencies.

Check out http://docs.sequelizejs.com/manual/installation/getting-started.html. SequalizeJS. The only place where this would really be useful is the auth server, as it does not have to be complicated, but if I can get django working with websockets, all three can be django no problem. All three should be tried with node as well.

#$ June 8, 2017

What does this server have to look like? It just needs to respond to simple requests. It has to deliver the UI script and info about the other app servers. Also default apps that handle login and other stuff.

#$ July 2, 2017

Thinking about Permissions. I want to be able to say:

NewPermission = Admin and Editor

This means hijacking the python magic methods like "__and__", etc. This is quite possible, I just don't know how to properly interact with it. Then I can say:

if permission == Admin and not Editor

Thinking about Interfaces. A set of interface elements are stored in the database and can be rendered into a single file. The tree of components is accessed using the same permissions as those used to access data. Lack of permission to access data means lack of permission to access the interface elements that would be used to display it.

1. Authenticate the user -> identity is known
2. Determine permissions -> Describe the user (Groups, Roles, etc are just shortcuts for user description)
3. Request resources -> "all of these", "things that match this", "exactly this"
	a. The entry point is a "path" describing how to get the data.

	e.g. 'clients.<client_uuid>.projects.<project_uuid>.name'

	b. The path is modified by the description of the user, denying or allowing access to properties.
	c. The data web is traversed, constructing database queries as conservatively as possible.
	d. The result of the query is integrated with the active information held by the user.